// Code generated by protoc-gen-cato. DO NOT EDIT.

package books

import (
	domainbooks "cato-example-bms/internal/models/domain/books"
	"encoding/json"
	"time"
)

type Books struct {
	ext         *extension
	Id          int64  `bson:"_id,omitempty"  xorm:"id"`
	Name        string `bson:"Name" xorm:"name"`
	Category    string `bson:"Category" xorm:"category"`
	BookClass   string `bson:"BookClass" xorm:"book_class"`
	innerAuthor *domainbooks.BookAuthor
	Author      string `bson:"Author" xorm:"author"`
	CreateAt    int64  `xorm:"create_time" bson:"CreateAt" `
	UpdateAt    int64  `xorm:"update_time" bson:"UpdateAt" `
}

func (model *Books) TableName() string {
	// bms book info
	return `books`
}

func (model *Books) GetColId() string {
	return "id"
}

func (model *Books) SetColId(value interface{}) {
	model.Id = value.(int64)
}

func (model *Books) GetColName() string {
	return "name"
}

func (model *Books) SetColName(value interface{}) {
	model.Name = value.(string)
}

func (model *Books) GetColCategory() string {
	return "category"
}

func (model *Books) SetColCategory(value interface{}) {
	model.Category = value.(string)
}

func (model *Books) GetColBookClass() string {
	return "book_class"
}

func (model *Books) SetColBookClass(value interface{}) {
	model.BookClass = value.(string)
}

func (model *Books) GetColAuthor() string {
	return "author"
}

func (model *Books) SetColAuthor(value interface{}) {
	model.Author = value.(string)
}

func (model *Books) GetAuthor() (*domainbooks.BookAuthor, error) {
	if model.innerAuthor != nil {
		return model.innerAuthor, nil
	}
	data := new(domainbooks.BookAuthor)
	if err := json.Unmarshal([]byte(model.Author), data); err != nil {
		return nil, err
	}
	model.innerAuthor = data
	return model.innerAuthor, nil

}

func (model *Books) SetAuthor(data *domainbooks.BookAuthor) error {
	if data == nil {
		return nil
	}
	ds, err := json.Marshal(data)
	if err != nil {
		return err
	}
	model.Author = string(ds)
	model.innerAuthor = data
	return nil
}

func (model *Books) GetColCreateAt() string {
	return "create_at"
}

func (model *Books) SetColCreateAt(value interface{}) {
	model.CreateAt = value.(int64)
}

func (model *Books) GetTimeCreateAt() time.Time {
	return time.Unix(model.CreateAt, 0)
}

func (model *Books) GetFormatTimeCreateAt() string {
	return model.GetTimeCreateAt().Format("2006-01-02T15:04:05Z07:00")
}

func (model *Books) SetTimeCreateAt(t time.Time) {
	model.CreateAt = t.Unix()
}

func (model *Books) SetFormatTimeCreateAt(s string) error {
	t, err := time.Parse("2006-01-02T15:04:05Z07:00", s)
	if err != nil {
		return err
	}
	model.SetTimeCreateAt(t)
	return nil
}

func (model *Books) GetColUpdateAt() string {
	return "update_at"
}

func (model *Books) SetColUpdateAt(value interface{}) {
	model.UpdateAt = value.(int64)
}

func (model *Books) GetTimeUpdateAt() time.Time {
	return time.Unix(model.UpdateAt, 0)
}

func (model *Books) GetFormatTimeUpdateAt() string {
	return model.GetTimeUpdateAt().Format("2006-01-02T15:04:05Z07:00")
}

func (model *Books) SetTimeUpdateAt(t time.Time) {
	model.UpdateAt = t.Unix()
}

func (model *Books) SetFormatTimeUpdateAt(s string) error {
	t, err := time.Parse("2006-01-02T15:04:05Z07:00", s)
	if err != nil {
		return err
	}
	model.SetTimeUpdateAt(t)
	return nil
}

func (model *Books) AllCols() []string {
	return []string{
		"author",
		"book_class",
		"category",
		"create_at",
		"id",
		"name",
		"update_at",
	}
}

func (model *Books) ToMap() map[string]interface{} {
	return map[string]interface{}{
		model.GetColAuthor():    model.Author,
		model.GetColBookClass(): model.BookClass,
		model.GetColCategory():  model.Category,
		model.GetColCreateAt():  model.CreateAt,
		model.GetColId():        model.Id,
		model.GetColName():      model.Name,
		model.GetColUpdateAt():  model.UpdateAt,
	}
}

func (model *Books) FromMap(data map[string]interface{}) {
	var (
		ok bool
	)
	_, ok = data[model.GetColAuthor()]
	if ok {
		model.Author = data[model.GetColAuthor()].(string)
	}
	_, ok = data[model.GetColBookClass()]
	if ok {
		model.BookClass = data[model.GetColBookClass()].(string)
	}
	_, ok = data[model.GetColCategory()]
	if ok {
		model.Category = data[model.GetColCategory()].(string)
	}
	_, ok = data[model.GetColCreateAt()]
	if ok {
		model.CreateAt = data[model.GetColCreateAt()].(int64)
	}
	_, ok = data[model.GetColId()]
	if ok {
		model.Id = data[model.GetColId()].(int64)
	}
	_, ok = data[model.GetColName()]
	if ok {
		model.Name = data[model.GetColName()].(string)
	}
	_, ok = data[model.GetColUpdateAt()]
	if ok {
		model.UpdateAt = data[model.GetColUpdateAt()].(int64)
	}
}
